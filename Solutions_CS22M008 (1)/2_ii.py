# -*- coding: utf-8 -*-
"""2_ii.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1boEb2cJRSf6uY13orcpRP2UmFWP8hY29
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

file= pd.read_csv("./Dataset.csv",header=None,float_precision='round_trip')
cluster = np.zeros(1000)
X=file.transpose()

def find_mean(c,cluster):   #finds mean of the cluster c
    Sum_x=0
    Sum_y=0
    n=5
    for i in range(0,1000):
            if(cluster[i]==c):
                Sum_x+=X[i][0]
                Sum_y+=X[i][1]
                n+=1         
    mean_x=Sum_x/n             
    mean_y=Sum_y/n
    mean= np.zeros((2))
    mean[0]=mean_x
    mean[1]=mean_y
    return mean

mean_c=np.zeros((5,2))
mean_c[1]=find_mean(1,cluster)

#1

def cluster_(k):
    cluster=np.random.randint(1,k,1000)
    cluster_update=cluster.copy()
    mean_c=np.zeros((k+1,2))
    flag=1
    flagC=1
    starting_flag=True
    ErrorV=[]
    
    while(starting_flag or np.any(cluster!=cluster_update)):
        starting_flag=False
        cluster=cluster_update.copy()
        for i in range(1,k+1):
            mean_c[i]=find_mean(i,cluster)
        distance = np.zeros(k+1)
        E=0
        for i in range (0,1000):
            temp=X[i]-mean_c[cluster[i]]
            E+=np.linalg.norm(temp)
            dist=np.zeros((1,2))
            for j in range (1,k+1):
                dist[0]=X[i]-mean_c[j]
                distance[j]=np.linalg.norm(dist[0])
            min_=distance[cluster[i]]
            min_index=cluster[i]
            for m in range(1,k+1):
                if(distance[m]<min_):
                    min_index=m
                    min_=distance[m]        
            cluster_update[i]=min_index
        ErrorV.append(E)
    return ErrorV,mean_c,cluster

#for k=2



ErrorV,mean_c,cluster=cluster_(2)

for i in range(0,1000):
    if(cluster[i]==1):
        plt.scatter(X[i][0],X[i][1],color = '#88c999' )
        
    if(cluster[i]==2):
        plt.scatter(X[i][0],X[i][1],color = 'red' )
        
plt.xlabel("x values")
plt.ylabel("y values")

plt.title("Clustering for k=2")
plt.show()
plt.plot(ErrorV,color = 'green')  
plt.xlabel("Iteration")
plt.ylabel("Error Function")
plt.show()

minvalue_series = X.min(axis = 1)
maxvalue_series = X.max(axis = 1)
for i in np.arange(minvalue_series[0],maxvalue_series[0],.3):
  for j in np.arange(minvalue_series[1],maxvalue_series[1],.3):
    Z=np.array([i,j])
    a=np.linalg.norm(Z-mean_c[1])
    b=np.linalg.norm(Z-mean_c[2])
    arr=[a,b]
    closest_mean=np.argmin(arr)
    if(closest_mean==0):
      plt.scatter(Z[0],Z[1],color = 'blue' )
    if(closest_mean==1):
      plt.scatter(Z[0],Z[1],color = '#88c999' )
plt.xlabel("x values")
plt.ylabel("y values")
plt.title("Voronoi regions for k=2")
plt.show()

#For k=3

ErrorV,mean_c,cluster=cluster_(3)

for i in range(0,1000):
    if(cluster[i]==1):
        plt.scatter(X[i][0],X[i][1],color = '#88c999' )
        
    if(cluster[i]==2):
        plt.scatter(X[i][0],X[i][1],color = 'red' )
        
    if(cluster[i]==3):
        plt.scatter(X[i][0],X[i][1],color = 'purple' )
        
plt.xlabel("x values")
plt.ylabel("y values")

plt.title("Clustering for k=3")
plt.show()
plt.plot(ErrorV,color = 'green')  
plt.xlabel("Iteration")
plt.ylabel("Error Function")
plt.show()

minvalue_series = X.min(axis = 1)
maxvalue_series = X.max(axis = 1)
for i in np.arange(minvalue_series[0],maxvalue_series[0],.3):
  for j in np.arange(minvalue_series[1],maxvalue_series[1],.3):
    Z=np.array([i,j])
    a=np.linalg.norm(Z-mean_c[1])
    b=np.linalg.norm(Z-mean_c[2])
    c=np.linalg.norm(Z-mean_c[3])
    arr=[a,b,c]
    closest_mean=np.argmin(arr)
    if(closest_mean==0):
      plt.scatter(Z[0],Z[1],color = 'blue' )
    if(closest_mean==1):
      plt.scatter(Z[0],Z[1],color = '#88c999' )
    if(closest_mean==2):
     plt.scatter(Z[0],Z[1],color = 'red')
plt.xlabel("x values")
plt.ylabel("y values")
plt.title("Voronoi regions for k=3")
plt.show()

#For k=3

slopes=np.zeros(2)

ErrorV,mean_c,cluster=cluster_(4)




for i in range(0,1000):
    if(cluster[i]==1):
        plt.scatter(X[i][0],X[i][1],color = 'orange' )
        
    if(cluster[i]==2):
        plt.scatter(X[i][0],X[i][1],color = 'red' )
        
    if(cluster[i]==3):
        plt.scatter(X[i][0],X[i][1],color = 'purple' )
        
    if(cluster[i]==4):
        plt.scatter(X[i][0],X[i][1],color = 'green' )
        
plt.xlabel("x values")
plt.ylabel("y values")

plt.title("Clustering for k=4")
plt.show()
plt.plot(ErrorV,color = 'green')  
plt.xlabel("Iteration")
plt.ylabel("Error Function")
plt.show()

minvalue_series = X.min(axis = 1)
maxvalue_series = X.max(axis = 1)
for i in np.arange(minvalue_series[0],maxvalue_series[0],.3):
  for j in np.arange(minvalue_series[1],maxvalue_series[1],.3):
    Z=np.array([i,j])
    a=np.linalg.norm(Z-mean_c[1])
    b=np.linalg.norm(Z-mean_c[2])
    c=np.linalg.norm(Z-mean_c[3])
    d=np.linalg.norm(Z-mean_c[4])
    arr=[a,b,c,d]
    closest_mean=np.argmin(arr)
    if(closest_mean==0):
      plt.scatter(Z[0],Z[1],color = 'blue')
    if(closest_mean==1):
      plt.scatter(Z[0],Z[1],color = '#88c999' )
    if(closest_mean==2):
     plt.scatter(Z[0],Z[1],color = 'red' )
    if(closest_mean==3):
      plt.scatter(Z[0],Z[1],color = 'green')
plt.xlabel("x values")
plt.title("Voronoi regions for k=4")
plt.ylabel("y values")
plt.show()

#For k=3

ErrorV,mean_c,cluster=cluster_(5)

for i in range(0,1000):
    if(cluster[i]==1):
        plt.scatter(X[i][0],X[i][1],color = '#88c999' )
        
    if(cluster[i]==2):
        plt.scatter(X[i][0],X[i][1],color = 'red' )
        
    if(cluster[i]==3):
        plt.scatter(X[i][0],X[i][1],color = 'purple' )
       
    if(cluster[i]==4):
        plt.scatter(X[i][0],X[i][1],color = 'green' )
      
    if(cluster[i]==5):
        plt.scatter(X[i][0],X[i][1],color = 'green' )
      
plt.xlabel("x values")
plt.ylabel("y values")

plt.title("Clustering for k=5")
plt.show()
plt.plot(ErrorV,color = 'green')  
plt.xlabel("Iteration")
plt.ylabel("Error Function")
plt.show()

minvalue_series = X.min(axis = 1)
maxvalue_series = X.max(axis = 1)
for i in np.arange(minvalue_series[0],maxvalue_series[0],.3):
  for j in np.arange(minvalue_series[1],maxvalue_series[1],.3):
    Z=np.array([i,j])
    a=np.linalg.norm(Z-mean_c[1])
    b=np.linalg.norm(Z-mean_c[2])
    c=np.linalg.norm(Z-mean_c[3])
    d=np.linalg.norm(Z-mean_c[4])
    e=np.linalg.norm(Z-mean_c[5])
    arr=[a,b,c,d,e]
    closest_mean=np.argmin(arr)
    if(closest_mean==0):
      plt.scatter(Z[0],Z[1],color = 'blue')
    if(closest_mean==1):
      plt.scatter(Z[0],Z[1],color = '#88c999' )
    if(closest_mean==2):
     plt.scatter(Z[0],Z[1],color = 'red' )
    if(closest_mean==3):
      plt.scatter(Z[0],Z[1],color = 'green')
    if(closest_mean==4):
      plt.scatter(Z[0],Z[1],color = 'purple')
plt.xlabel("x values")
plt.ylabel("y values")
plt.title("Voronoi regions for k=5")
plt.show()

