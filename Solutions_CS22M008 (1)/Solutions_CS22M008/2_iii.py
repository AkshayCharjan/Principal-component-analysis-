# -*- coding: utf-8 -*-
"""2_iii.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rk_OiAK_EQlF_FYVBT9BZGvKI64yVc6x
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

file= pd.read_csv("./Dataset.csv",header=None,float_precision='round_trip')

plt.scatter(file[0], file[1])
plt.title("Data points")
plt.xlabel("x values")
plt.ylabel("y values")
plt.show()

mean_x=file[0].mean()
mean_y=file[1].mean()

file[0]=file[0] - mean_x
file[1]=file[1] - mean_y

def convert(x,y):
    xty=np.dot(x,y)
    return (1+xty)**2

X=file.transpose()

K = np.zeros((1000, 1000))
for i in range (0 ,1000):
    for j in range (i, 1000):
        K[i][j]=convert(X[i],X[j])
        K[j][i]=K[i][j]

#Data Centering 
I=np.identity(1000)
M=I-(1/1000)
MK=np.dot(M,K)
MKM=np.dot(MK,M) #centered_K

from numpy.lib.twodim_base import triu_indices
e_values, e_vectors = np.linalg.eig(MKM)
z=e_values, e_vectors
e_v=e_vectors.transpose() #[[w1x w1y][w2x w2y]]
pair=[]
for i in range(0,1000):
  t=e_values[i],e_v[i]
  pair.append(t)
pair.sort(reverse=True)

#H Matrix
H=[]
for i in range (0,4):
  H.append(pair[i][1])

H=np.array(H)   #(4x1000)
H=H.transpose() #(1000x4)

H_normalized=H  #(1000,4)
for i in range (0,4):
  temp=np.array(H[i])
  length_=np.linalg.norm(temp)
  H_normalized[i]=H[i]/length_

X=H_normalized.transpose() #(4,1000)

def find_mean(c,cluster):   #finds mean of the cluster c
    Sum=np.zeros(4)
    mean=np.zeros(4)
    n=0
    for i in range(0,4):
                # Sum_1+=X[0][i]
                # Sum_2+=X[1][i]
                # ..
                # Sum_8+=X[7][i]
              for j in range(0,1000):
                if(cluster[j]==c):
                  Sum[i]+=X[i][j]
                n+=1         
    for k in range(0,4):
      mean[k]=Sum[k]/n             
    return mean

Sum=np.zeros(4)
for j in range(0,4):
                  Sum[j]+=X[j][0]

cluster=np.random.randint(1,5,1000)
mean_c=np.zeros((4+1,4))
cluster_update=cluster.copy()
flag=1
flagC=1
starting_flag=True
# ErrorV=[]
while(starting_flag or np.any(cluster!=cluster_update)):
    starting_flag=False
    cluster=cluster_update.copy()
    for i in range(1,5):
        mean_c[i]=find_mean(i,cluster)
    distance = np.zeros(5)
    # E=0
    for i in range (0,1000):
        temp=X[:,i]-mean_c[cluster[i]]
        # E+=np.linalg.norm(temp)
        dist=np.zeros((1,4))
        for j in range (1,5):
            dist[0]=X[:,i]-mean_c[j]
            distance[j]=np.linalg.norm(dist[0])
        min_=distance[cluster[i]]
        min_index=cluster[i]
        for m in range(1,5):
            if(distance[m]<min_):
                min_index=m
                min_=distance[m]        
        cluster_update[i]=min_index

X_=file.transpose()
for i in range(0,1000):
    if(cluster[i]==1):
        plt.scatter(X_[i][0],X_[i][1],color = '#88c999' )
        
    if(cluster[i]==2):
        plt.scatter(X_[i][0],X_[i][1],color = 'red' )
        
    if(cluster[i]==3):
        plt.scatter(X_[i][0],X_[i][1],color = 'purple' )
       
    if(cluster[i]==4):
        plt.scatter(X_[i][0],X_[i][1],color = 'green' )
      
plt.xlabel("x value")
plt.ylabel("y value")

plt.title("Spectral Clustering with k=4")
plt.show()